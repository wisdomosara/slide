{"version":3,"sources":["components/NavBar.jsx","components/Footer.jsx","components/Slides.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","class","style","fontSize","color","marginLeft","window","innerWidth","href","React","Component","Footer","props","state","num","val","setInterval","setState","max","value","this","Slides","backgroundImage","image","App","images","display","i","slidee","document","querySelectorAll","q","length","styles","width","height","backgroundSize","backgroundRepeat","transition","slideComponents","map","imag","slider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAiCeA,E,uKAxBP,OAEQ,6BACI,yBAAKC,UAAU,QACX,uBAAGC,MAAM,eAAeC,MAAO,CAACC,SAAS,GAAGC,MAAM,WAClD,uBAAGF,MAAO,CAACG,WAAW,SAAtB,sBAEJ,yBAAKL,UAAU,QAAQM,OAAOC,WAAa,IAAM,KAAM,4BAC/C,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGP,MAAM,mBACb,4BAAI,uBAAGA,MAAM,4B,GArBpBQ,IAAMC,WCqCZC,E,kDApCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAM,EACNC,IAAK,MAJM,E,iEAOE,IAAD,OAChBC,aAAY,kBAAM,EAAKC,UAAS,SAAAJ,GAI5B,OAHsB,GAAlB,EAAKA,MAAMC,KACX,EAAKG,SAAS,CAACH,IAAI,EAAEC,IAAI,OAEtB,CAACD,IAAMD,EAAMC,IAAM,EAC1BC,IAAKF,EAAME,IAAM,WAAQ,O,+BAM7B,OACI,gCACI,yBAAKf,UAAU,UACX,uBAAGC,MAAM,uBAEb,yBAAKD,UAAU,UACX,uBAAGC,MAAM,wBAEb,8BAAUiB,IAAI,MAAMC,MAAOC,KAAKP,MAAME,MACtC,yBAAKf,UAAU,UACX,4BAAKoB,KAAKP,MAAMC,W,GA9BfL,IAAMC,WCeZW,E,kDAdX,WAAYT,GAAQ,uCACVA,G,qDAGN,OACI,6BACI,yBAAKZ,UAAU,QAAQE,MAAO,CAACoB,gBAAgBF,KAAKR,MAAMW,c,GAPrDd,IAAMC,WCsDZc,E,kDAlDb,aAAe,IAAD,8BACZ,gBACKX,MAAQ,CACTY,OAAQ,CAAC,uBAAuB,uBAAwB,uBAAwB,uBAAwB,uBAAwB,wBAChIC,QAAU,wBAJF,E,iEAOO,IAAD,OACdC,EAAI,EACJX,aAAY,WACV,IAAIY,EAASC,SAASC,iBAAiB,UAEvC,GADAF,EAAOD,EAAI,GAAGzB,MAAMwB,QAAU,OACrB,IAANC,EAAQ,CAETC,EADAD,EAAI,GACMzB,MAAMwB,QAAS,OACzB,IAAI,IAAIK,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAChCH,EAAOG,GAAG7B,MAAMwB,QAAU,QAI9B,EAAKT,UAAS,SAAAJ,GACZ,MAAO,CAACa,QAAUb,EAAMY,OAAOE,OAGjCA,MACA,O,+BAIN,IAAIM,EAAS,CACXX,gBAAgBF,KAAKP,MAAMa,QAC3BQ,MAAM,OACNC,OAAO,QACPC,eAAgB,QAChBC,iBAAiB,YACjBC,WAAY,mBAEVC,EAAkBnB,KAAKP,MAAMY,OAAOe,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAQlB,MAAOkB,OAGnE,OAFArB,KAAKP,MAAM6B,OAASH,EAGhB,yBAAKrC,MAAO+B,GACV,kBAAC,EAAD,MACE,yBAAKjC,UAAU,YAAYoB,KAAKP,MAAM6B,QACxC,kBAAC,EAAD,W,GA7CQjC,IAAMC,WCOJiC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASqB,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.64d9d1e4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass NavBar extends React.Component {\r\n    \r\n    render() { \r\n        // let clicked = {\r\n        //     borderBottom: \"2px solid orange\"\r\n        // }\r\n\r\n        return ( \r\n            \r\n                <nav>\r\n                    <div className=\"logo\">\r\n                        <i class=\"fas fa-globe\" style={{fontSize:30,color:\"white\"}}></i>\r\n                        <p style={{marginLeft:\"20px\"}}>GLOBAL ADVENTURES</p>\r\n                    </div>\r\n                    <div className=\"navi\">{window.innerWidth < 576 ? null :<ul>\r\n                            <li><a href=\"#\">HOME</a></li>\r\n                            <li><a href=\"#\">HOLIDAYS</a></li>\r\n                            <li><a href=\"#\">TEAMS</a></li>\r\n                            <li><a href=\"#\">LOCATION</a></li>\r\n                            <li><a href=\"#\">CONTACTS</a></li>\r\n                            <li><i class=\"fas fa-search\"></i></li>\r\n                            <li><i class=\"fas fa-portrait\"></i></li>\r\n                        </ul>}\r\n                        \r\n                    </div>\r\n                </nav>\r\n            \r\n        );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            num : 1,\r\n            val: 16.6\r\n        }\r\n    }\r\n    componentWillMount(){\r\n        setInterval(() => this.setState(state => {\r\n            if (this.state.num == 6) {\r\n                this.setState({num:1,val:16.6})\r\n            }\r\n            return {num : state.num + 1,\r\n            val: state.val + 16.6}}),4000)\r\n            \r\n    }\r\n\r\n    render() { \r\n        \r\n        return (  \r\n            <footer >\r\n                <div className=\"circle\">\r\n                    <i class=\"fas fa-angle-left\"></i>\r\n                </div>\r\n                <div className=\"circle\">\r\n                    <i class=\"fas fa-angle-right\"></i>\r\n                </div>\r\n                <progress max=\"100\" value={this.state.val}></progress>\r\n                <div className=\"number\">\r\n                    <h2>{this.state.num}</h2>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Footer;","import React from 'react';\r\n\r\nclass Slides extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className=\"slide\" style={{backgroundImage:this.props.image}}>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Slides;","import React from 'react';\nimport NavBar from \"./components/NavBar.jsx\"\nimport Footer from \"./components/Footer.jsx\"\nimport Slides from \"./components/Slides\"\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n        images: [\"url(images/pic1.jpg)\",\"url(images/pic2.jpg)\", \"url(images/pic3.jpg)\", \"url(images/pic4.jpg)\", \"url(images/pic5.jpg)\", \"url(images/pic6.jpg)\"],\n        display : \"url(images/pic1.jpg)\"\n    }\n  }\n  componentWillMount(){\n    let i = 1;\n        setInterval(() => {\n          let slidee = document.querySelectorAll(\".slide\");\n          slidee[i - 1].style.display = \"none\"\n          if(i === 6){\n            i = 0;\n            slidee[i].style.display =\"none\"\n            for(let q = 0; q < slidee.length; q++) {\n              slidee[q].style.display = \"block\"\n            }\n\n          }\n          this.setState(state => {\n            return {display : state.images[i]}\n          })\n            \n          i++\n        },4000)\n        \n  }\n  render() { \n    let styles = {\n      backgroundImage:this.state.display,\n      width:\"100%\",\n      height:\"100vh\",\n      backgroundSize: \"cover\",\n      backgroundRepeat:\"no-repeat\",\n      transition: \"all 1s ease-out\"\n    }\n    let slideComponents = this.state.images.map(imag => <Slides image={imag}/>)\n    this.state.slider = slideComponents\n    \n    return (\n        <div style={styles}>\n          <NavBar />\n            <div className=\"slidediv\">{this.state.slider}</div>\n          <Footer />\n        </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}