{"version":3,"sources":["components/NavBar.jsx","components/Footer.jsx","components/Slides.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","class","style","fontSize","color","marginLeft","window","innerWidth","href","React","Component","Footer","props","state","num","val","setInterval","setState","max","value","this","Slides","backgroundImage","image","App","images","display","onload","preloader","document","querySelector","main","classList","add","interval","i","removed","imagee","filter","fil","push","styles","width","height","backgroundSize","backgroundRepeat","transition","slideComponents","map","imag","src","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57d20cd9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass NavBar extends React.Component {\r\n    \r\n    render() { \r\n        // let clicked = {\r\n        //     borderBottom: \"2px solid orange\"\r\n        // }\r\n\r\n        return ( \r\n            \r\n                <nav>\r\n                    <div className=\"logo\">\r\n                        <i class=\"fas fa-globe\" style={{fontSize:30,color:\"white\"}}></i>\r\n                        <p style={{marginLeft:\"20px\"}}>GLOBAL ADVENTURES</p>\r\n                    </div>\r\n                    <div className=\"navi\">{window.innerWidth < 576 ? null :<ul>\r\n                            <li><a href=\"#\">HOME</a></li>\r\n                            <li><a href=\"#\">HOLIDAYS</a></li>\r\n                            <li><a href=\"#\">TEAMS</a></li>\r\n                            <li><a href=\"#\">LOCATION</a></li>\r\n                            <li><a href=\"#\">CONTACTS</a></li>\r\n                            <li><i class=\"fas fa-search\"></i></li>\r\n                            <li><i class=\"fas fa-portrait\"></i></li>\r\n                        </ul>}\r\n                        \r\n                    </div>\r\n                </nav>\r\n            \r\n        );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React from 'react'\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            num : 1,\r\n            val: 16.6\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        setInterval(() => this.setState(state => {\r\n            if (this.state.num == 6) {\r\n                this.setState({num:1,val:16.6})\r\n            }\r\n            return {num : state.num + 1,\r\n            val: state.val + 16.6}}),4000)\r\n        \r\n    }\r\n\r\n    render() { \r\n        \r\n        return (  \r\n            <footer >\r\n                <div className=\"circle\">\r\n                    <i class=\"fas fa-angle-left\"></i>\r\n                </div>\r\n                <div className=\"circle\">\r\n                    <i class=\"fas fa-angle-right\"></i>\r\n                </div>\r\n                <progress max=\"100\" value={this.state.val}></progress>\r\n                <div className=\"number\">\r\n                    <h2>{this.state.num}</h2>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Footer;","import React from 'react';\r\n\r\nclass Slides extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className=\"slide\" style={{backgroundImage:this.props.image}}>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Slides;","import React from 'react';\r\nimport NavBar from \"./components/NavBar.jsx\"\r\nimport Footer from \"./components/Footer.jsx\"\r\nimport Slides from \"./components/Slides\"\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n        images: [\"url(images/pic1.jpg)\",\"url(images/pic2.jpg)\", \"url(images/pic3.jpg)\", \"url(images/pic4.jpg)\", \"url(images/pic5.jpg)\", \"url(images/pic6.jpg)\"],\r\n        display : \"url(images/pic1.jpg)\"\r\n    }\r\n  }\r\n  componentWillMount(){\r\n        window.onload = function()\r\n    {\r\n      let preloader = document.querySelector(\".preloader\");\r\n      let main = document.querySelector(\".main\");\r\n      preloader.classList.add(\"hide\");\r\n      main.style.display = \"block\"\r\n    }\r\n    this.interval = setInterval(() => {\r\n      let i = 0;\r\n      let removed = this.state.images[i]\r\n      let imagee = this.state.images.filter(fil => !(this.state.images[0] === fil))\r\n      imagee.push(removed)\r\n      this.setState({images : imagee});\r\n      this.setState({display : imagee[0]})\r\n      i = i + 1\r\n    },4000)\r\n}\r\n  render() { \r\n    let styles = {\r\n      backgroundImage:this.state.display,\r\n      width:\"100%\",\r\n      display:\"none\",\r\n      height:\"100vh\",\r\n      backgroundSize: \"cover\",\r\n      backgroundRepeat:\"no-repeat\",\r\n      transition: \"all 1s ease-out\"\r\n    }\r\n    let slideComponents = this.state.images.map(imag => <Slides image={imag}/>)\r\n    \r\n    return (<div>\r\n              <div className=\"preloader\">\r\n                <img src=\"images/Ripple-2.6s-231px.svg\" width=\"50%\"></img>\r\n              </div>\r\n              <div style={styles} className=\"main\">\r\n                <NavBar />\r\n                  <div className=\"slidediv\">{slideComponents}</div>\r\n                <Footer />\r\n            </div>\r\n          </div>\r\n        \r\n    );\r\n  }\r\n}\r\n \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './App.css'\r\n\r\n  ReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}